import static org.junit.Assert.*;

import org.junit.*;

public class LaboonCoinTest {

    // Assert that creating a new LaboonCoin instance
    // does not return a null reference
    @Test
    public void testLaboonCoinExists() {
        LaboonCoin l = new LaboonCoin();
        assertNotNull(l);
    }

    // Asserts that createBlock() generates a block string correctly
    @Test
    public void testCreateBlock1() {
        LaboonCoin l = new LaboonCoin();
        String data = "boo";
        int prevHash = 0x00000000;
        int nonce = 0x000010bb;
        int hash = 0x000b43be;

        assertEquals("boo|00000000|000010bb|000b43be", l.createBlock(data, prevHash, nonce, hash));
    }

    // Asserts that createBlock() generates a block string correctly
    @Test
    public void testCreateBlock2() {
        LaboonCoin l = new LaboonCoin();
        String data = "mars";
        int prevHash = 0x00086d30;
        int nonce = 0x00004dfa;
        int hash = 0x0008ff9f;

        assertEquals("mars|00086d30|00004dfa|0008ff9f", l.createBlock(data, prevHash, nonce, hash));
    }

    // Asserts that createBlock() generates a block string correctly
    @Test
    public void testCreateBlock3() {
        LaboonCoin l = new LaboonCoin();
        String data = "quock";
        int prevHash = 0x000f593c;
        int nonce = 0x00000229;
        int hash = 0x000064f6;

        assertEquals("quock|000f593c|00000229|000064f6", l.createBlock(data, prevHash, nonce, hash));
    }

    // Asserts that an empty block chain is printed correctly with getBlockChain()
    @Test
    public void testGetEmptyBlockChain() {
        LaboonCoin l = new LaboonCoin();

        assertEquals("", l.getBlockChain());
    }

    // Asserts that a block chain with a single block is printed correctly with getBlockChain()
    @Test
    public void testGetSingleBlockChain() {
        LaboonCoin l = new LaboonCoin();

        l.blockchain.add("boo|00000000|000010bb|000b43be");

        assertEquals("boo|00000000|000010bb|000b43be\n", l.getBlockChain());
    }

    // Asserts that a block chain with multiple blocks is printed correctly with getBlockChain()
    @Test
    public void testGetMultipleBlockChain() {
        LaboonCoin l = new LaboonCoin();

        l.blockchain.add("boo|00000000|000010bb|000b43be");
        l.blockchain.add("boo|000b43be|000005a1|00075500");
        l.blockchain.add("boo|00075500|000016da|000f593c");
        l.blockchain.add("quock|000f593c|00000229|000064f6");

        String expected = "boo|00000000|000010bb|000b43be\n"
        + "boo|000b43be|000005a1|00075500\n"
        + "boo|00075500|000016da|000f593c\n"
        + "quock|000f593c|00000229|000064f6\n";

        assertEquals(expected, l.getBlockChain());
    }

    // Assert that a valid LaboonHash can be generated with hash() from a block chain string
    @Test
    public void testBlockHash() {
        String str = "00000000000010bbboo";
        LaboonCoin l = new LaboonCoin();

        int hash = l.hash(str);
        assertEquals(0x000b43be, hash);
    }

    // Assert that a valid LaboonHash can be generated by the hash() function
    @Test
    public void testBasicHash() {
        String str = "boo";
        LaboonCoin l = new LaboonCoin();

        int hash = 0;
        hash = l.hash(str);
        assertEquals(hash, Integer.parseInt("551fda32", 16));
    }

    // Assert that a hash is not generated when a null string is entered to hash()
    @Test
    public void testNullHash() {
        LaboonCoin l = new LaboonCoin();

        try {
            int hash = l.hash(null);
        } catch (IllegalArgumentException e) {
        return;
        }

        fail("No IllegalArgumentException thrown");
    }

    // Assert that a hash can be generated by the hash function
    @Test
    public void testInvalidHash() {
        int hash = Integer.valueOf("00ffffff", 16);
        LaboonCoin l = new LaboonCoin();

        assertFalse(l.validHash(3, hash));
    }

    // Assert that a hash can be generated by the hash function
    @Test
    public void testVaildHashThree() {
        int hash = Integer.valueOf("000fffff", 16);
        LaboonCoin l = new LaboonCoin();

        assertTrue(l.validHash(3, hash));
    }

    // Assert that a hash can be generated by the hash function
    @Test
    public void testValidHash() {
        int hash = Integer.valueOf("0000ffff", 16);
        LaboonCoin l = new LaboonCoin();
        assertTrue(l.validHash(3, hash));
    }    
}
